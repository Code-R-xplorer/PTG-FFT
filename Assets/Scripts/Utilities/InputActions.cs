//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Utilities/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Utilities
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""cbc41cbb-1e1a-4fb9-bd16-e77f41cc8a36"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fe3b9cae-82e4-4647-bcae-59d3043666b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b52ddcd5-7faa-4c0e-b74d-4286e7748112"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Terrain"",
            ""id"": ""a1a32918-46e5-49f9-ada5-b4e0b1b00152"",
            ""actions"": [
                {
                    ""name"": ""Generate"",
                    ""type"": ""Button"",
                    ""id"": ""715d6512-cf70-4789-99e0-f00c5e8aa622"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c588883c-ffd6-48c5-bf4e-2e226d00214f"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Generate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
            // Terrain
            m_Terrain = asset.FindActionMap("Terrain", throwIfNotFound: true);
            m_Terrain_Generate = m_Terrain.FindAction("Generate", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Camera
        private readonly InputActionMap m_Camera;
        private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
        private readonly InputAction m_Camera_Zoom;
        public struct CameraActions
        {
            private @InputActions m_Wrapper;
            public CameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void AddCallbacks(ICameraActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }

            private void UnregisterCallbacks(ICameraActions instance)
            {
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
            }

            public void RemoveCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // Terrain
        private readonly InputActionMap m_Terrain;
        private List<ITerrainActions> m_TerrainActionsCallbackInterfaces = new List<ITerrainActions>();
        private readonly InputAction m_Terrain_Generate;
        public struct TerrainActions
        {
            private @InputActions m_Wrapper;
            public TerrainActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Generate => m_Wrapper.m_Terrain_Generate;
            public InputActionMap Get() { return m_Wrapper.m_Terrain; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TerrainActions set) { return set.Get(); }
            public void AddCallbacks(ITerrainActions instance)
            {
                if (instance == null || m_Wrapper.m_TerrainActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TerrainActionsCallbackInterfaces.Add(instance);
                @Generate.started += instance.OnGenerate;
                @Generate.performed += instance.OnGenerate;
                @Generate.canceled += instance.OnGenerate;
            }

            private void UnregisterCallbacks(ITerrainActions instance)
            {
                @Generate.started -= instance.OnGenerate;
                @Generate.performed -= instance.OnGenerate;
                @Generate.canceled -= instance.OnGenerate;
            }

            public void RemoveCallbacks(ITerrainActions instance)
            {
                if (m_Wrapper.m_TerrainActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITerrainActions instance)
            {
                foreach (var item in m_Wrapper.m_TerrainActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TerrainActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TerrainActions @Terrain => new TerrainActions(this);
        public interface ICameraActions
        {
            void OnZoom(InputAction.CallbackContext context);
        }
        public interface ITerrainActions
        {
            void OnGenerate(InputAction.CallbackContext context);
        }
    }
}
